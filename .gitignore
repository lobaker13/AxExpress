# See https://help.github.com/articles/ignoring-files for more about ignoring files.
#
# If you find yourself ignoring temporary files generated by your text editor
# or operating system, you probably want to add a global ignore instead:
#   git config --global core.excludesfile '~/.gitignore_global'

# Ignore bundler config.
/.bundle

# Ignore the default SQLite database.
/db/*.sqlite3
/db/*.sqlite3-journal

# Ignore all logfiles and tempfiles.
/log/*
/tmp/*
!/log/.keep
!/tmp/.keep

/node_modules
/yarn-error.log

.byebug_history

---------------------SCRAPE---------------------------------
// get results from plumbs page
// link: https://www.plumbsveterinarydrugs.com/#!/monographs/a
let results = $$(".drug-result").map(c => ({
  name: $x("normalize-space(./descendant::a[1]/text())", c),
  id: $x("substring-after(./descendant::a[1]/@href,'monograph/')", c)
}));
// drug table format:
// name (string/varchar)
// plumbs_id
//
// #db/seeds.rb
// Drug.create([
// # to do: paste seedStr in here!
// ])

// transform to seed data in ruby style...
let seedStr = results.reduce((str, drug) => str + `{name: "${drug.name}", plumbs_id: "${drug.id}"},\n`, '');



//escape quote
function eQ(str) {
  return str.replace(/'/g, "\\'");
}

// xpath query for category
function clean(str) {
  return str.replace(/,?\W*$/, '');
}
let detail = {
  class: $x("normalize-space(//*[@data-ng-bind-html='monographHtml.drugClass'][1]/text())"),
  category:
  $x("normalize-space(//*[contains(@data-ng-bind,'monographType')][1]/text())"),
  pronunciation: $x("//*[contains(@data-ng-show,'pronunciation')][1]/descendant::text()").reduce((str, word) => str + word.nodeValue, ''),
  brandNames: $x("//*[contains(@data-ng-repeat,'commercial_names')]/text()").map(c => clean(c.nodeValue))
}

// Generates the following:
{
  "class": "Phenothiazine Sedative/Tranquilizer",
  "category": "Systemic Drug",
  "pronunciation": "(ase-pro-ma-zeen)",
  "brandNames": ["Acetylpromazine", "ACE", "ACP", "PromAce"]
}

// get results for breed of dogs website

let results = $$(".post-title").map(d => $x("normalize-space(./text())", d));
  // to get the results on their own line use xpath notation = results.join("\n")

  // get results for breed of cats

let results = $$(".breed-name").map(c => $x("normalize-space(./text())", c));
----------------------------------------------------------------------------
